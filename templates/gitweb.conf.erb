# File generated by puppet

BEGIN {
  $ENV{HOME} = "<%= scope.lookupvar('gitolite::params::gt_repo_base') %>";
  $ENV{GL_BINDIR} = "<%= scope.lookupvar('gitolite::params::gt_bindir') %>";
  $ENV{GL_LIBDIR} = "<%= scope.lookupvar('gitolite::params::gt_bindir') %>lib";
}

use lib $ENV{GL_LIBDIR};
use Gitolite::Easy;

$GIT = "/usr/bin/git";
$projectroot = "<%= scope.lookupvar('gitolite::params::gt_repo_dir') %>";
$projects_list = "<%= scope.lookupvar('gitolite::params::gt_repo_base') %>/projects.list";
$stylesheet = "<%= scope.lookupvar('gitolite::params::gt_gitweb_spath') %>gitweb.css";
$logo = "<%= scope.lookupvar('gitolite::params::gt_gitweb_spath') %>git-logo.png";
$favicon = "<%= scope.lookupvar('gitolite::params::gt_gitweb_spath') %>git-favicon.png";
@git_base_url_list = ("ssh://<%= scope.lookupvar('gitolite::params::gt_uid') %>\@<%= @vhost %>", "http://<%= @vhost %>");
$projects_list_description_width = 50;

$my_uri = "<%= @uri %>";
$home_link = "<%= @uri %>";
$site_name = "<%= @site_name %>";

$prevent_xss = true;
$feature{'pathinfo'}{'default'} = [1];
$feature{'blame'}{'default'} = [1];
$feature{'blame'}{'override'} = [1];
$feature{'pickaxe'}{'default'} = [1];
$feature{'pickaxe'}{'override'} = [1];
$feature{'snapshot'}{'default'} = [1];
$feature{'snapshot'}{'override'} = [1];
$feature{'search'}{'default'} = [1];
$feature{'grep'}{'default'} = [1];
$feature{'grep'}{'override'} = [1];


$ENV{GL_USER} = $cgi->remote_user || "gitweb";

$export_auth_hook = sub {
    my $repo = shift;
    # gitweb passes us the full repo path; we need to strip the beginning and
    # the end, to get the repo name as it is specified in gitolite conf
    return unless $repo =~ s/^\Q$projectroot\E\/?(.+)\.git$/$1/;
    # call Easy.pm's 'can_read' function
    return can_read($repo);
};
